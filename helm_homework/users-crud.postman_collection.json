{
	"info": {
		"_postman_id": "85cc5da9-5b25-459c-aa7b-32e8904b1649",
		"name": "users-crud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25646654"
	},
	"item": [
		{
			"name": "healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to expected JSON\", function () {\r",
							"    const expectedResponse = { status: \"OK\" };\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "user not created yet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to expected JSON\", function () {\r",
							"    const expectedResponse = {\"error\":\"user not found\"};\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains key 'id' and sets environment variable\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"\r",
							"    if (responseBody.id) {\r",
							"        pm.environment.set(\"id\", responseBody.id);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"maksonday\",\r\n    \"firstname\": \"Maksim\",\r\n    \"lastname\": \"Agafonov\",\r\n    \"phone\": \"1234\",\r\n    \"email\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is equal to expected JSON\", function () {\r",
							"    const expectedResponse = {\"username\":\"maksonday\",\"firstname\":\"Maksim\",\"lastname\":\"Agafonov\",\"email\":\"1234\",\"phone\":\"1234\"};\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"maksonday\",\r\n    \"firstname\": \"Maksim\",\r\n    \"lastname\": \"Agafonov\",\r\n    \"phone\": \"1234\",\r\n    \"email\": \"1234\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"maxsonday\",\r\n    \"firstname\": \"Maxim\",\r\n    \"lastname\": \"Agafonov\",\r\n    \"phone\": \"1234\",\r\n    \"email\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"maxsonday\",\r\n    \"firstname\": \"Maxim\",\r\n    \"lastname\": \"Agafonov\",\r\n    \"phone\": \"1234\",\r\n    \"email\": \"1234\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "id",
			"value": "1",
			"type": "string"
		}
	]
}